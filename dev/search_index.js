var documenterSearchIndex = {"docs":
[{"location":"api/Inputs/","page":"Inputs module","title":"Inputs module","text":"Modules = [AbInitioSoftwareBase.Inputs]","category":"page"},{"location":"api/Inputs/#AbInitioSoftwareBase.Inputs.Input","page":"Inputs module","title":"AbInitioSoftwareBase.Inputs.Input","text":"An abstract type representing an input object of ab initio software.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/#AbInitioSoftwareBase.Inputs.Namelist","page":"Inputs module","title":"AbInitioSoftwareBase.Inputs.Namelist","text":"Namelist <: InputEntry\n\nThe abstraction of an component of a Input, a basic Fortran data structure.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/#AbInitioSoftwareBase.Inputs.inputstring","page":"Inputs module","title":"AbInitioSoftwareBase.Inputs.inputstring","text":"Return an AbstractString, that represents the input of the software. Need to be implemented.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/#AbInitioSoftwareBase.Inputs.writeinput-Tuple{IO,AbInitioSoftwareBase.Inputs.Input}","page":"Inputs module","title":"AbInitioSoftwareBase.Inputs.writeinput","text":"writeinput(io::IO, input::Input)\nwriteinput(file, input::Input)\n\nWrite an Input object to file or io using corresponding string format.\n\n\n\n\n\n","category":"method"},{"location":"api/AbInitioSoftwareBase/","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase module","text":"Modules = [AbInitioSoftwareBase]","category":"page"},{"location":"api/AbInitioSoftwareBase/#AbInitioSoftwareBase.extension-Tuple{Any}","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase.extension","text":"extension(file)\n\nGet the extension from file. Return an empty string if no extension is found.\n\n\n\n\n\n","category":"method"},{"location":"api/AbInitioSoftwareBase/#AbInitioSoftwareBase.load-Tuple{Any,Any}","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase.load","text":"loadfile(file)\n\nLoad data from file to a Dict.\n\nBy now, YAML, JSON, and TOML formats are supported. The format is recognized by file extension.\n\n\n\n\n\n","category":"method"},{"location":"api/AbInitioSoftwareBase/#AbInitioSoftwareBase.loads-Tuple{AbstractString,Any}","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase.loads","text":"loadstring(format, str)\n\nLoad data from str to a Dict. Allowed formats are \"yaml\", \"yml\", \"json\" and \"toml\".\n\n\n\n\n\n","category":"method"},{"location":"api/AbInitioSoftwareBase/#AbInitioSoftwareBase.save-Tuple{Any,Any}","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase.save","text":"savefile(file, data)\n\nSave data to file.\n\nBy now, YAML, JSON, and TOML formats are supported. The format is recognized by file extension.\n\nwarning: Warning\nAllowed data types can be referenced in JSON.jl documentation and YAML.jl documentation. For TOML format, only AbstractDict type is allowed.\n\n\n\n\n\n","category":"method"},{"location":"develop/#How-to-develop-this-package-by-yourself","page":"Development","title":"How to develop this package by yourself","text":"","category":"section"},{"location":"develop/#Download-the-project","page":"Development","title":"Download the project","text":"","category":"section"},{"location":"develop/","page":"Development","title":"Development","text":"Similar to section \"Installation\", run","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"julia> using Pkg\n\njulia> pkg\"dev git@github.com:MineralsCloud/AbInitioSoftwareBase.jl.git\"","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"Then the package will be cloned to your local machine at a path. On macOS, by default is located at ~/.julia/dev/AbInitioSoftwareBase unless you modify the JULIA_DEPOT_PATH environment variable. (See Julia's official documentation on how to do this.) In the following text, we will call it PKGROOT.","category":"page"},{"location":"develop/#instantiating","page":"Development","title":"Instantiate the project","text":"","category":"section"},{"location":"develop/","page":"Development","title":"Development","text":"Go to PKGROOT, start a new Julia session and run","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"julia> using Pkg; Pkg.instantiate()","category":"page"},{"location":"develop/#How-to-build-docs","page":"Development","title":"How to build docs","text":"","category":"section"},{"location":"develop/","page":"Development","title":"Development","text":"Usually, the up-to-state doc is available in here, but there are cases where users need to build the doc themselves.","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"After instantiating the project, go to PKGROOT, run (without the $ prompt)","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"in your terminal. In a while a folder PKGROOT/docs/build will appear. Open PKGROOT/docs/build/index.html with your favorite browser and have fun!","category":"page"},{"location":"develop/#How-to-run-tests","page":"Development","title":"How to run tests","text":"","category":"section"},{"location":"develop/","page":"Development","title":"Development","text":"After instantiating the project, go to PKGROOT, run (without the $ prompt)","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"$ julia --color=yes test/runtests.jl","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"in your terminal.","category":"page"},{"location":"troubleshooting/#Troubleshooting","page":"Troubleshooting","title":"Troubleshooting","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"This page collects some possible errors you may encounter and trick how to fix them.","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you have additional tips, please submit a PR with suggestions.","category":"page"},{"location":"troubleshooting/#Installation-problems","page":"Troubleshooting","title":"Installation problems","text":"","category":"section"},{"location":"troubleshooting/#Cannot-find-the-Julia-executable","page":"Troubleshooting","title":"Cannot find the Julia executable","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Make sure you have Julia installed in your environment. Please download the latest stable Julia for your platform. If you are using macOS, the recommended way is to use Homebrew. If you do not want to install Homebrew or you are using other *nix that Julia supports, download the corresponding binaries. And then create a symbolic link /usr/local/bin/julia to the Julia executable. If /usr/local/bin/ is not in your $PATH, modify your .bashrc or .zshrc and export it to your $PATH. Some clusters, like Habanero, Comet already have Julia installed as a module, you may just module load julia to use it. If not, either install by yourself or contact your administrator.","category":"page"},{"location":"troubleshooting/#Loading-settings","page":"Troubleshooting","title":"Loading settings","text":"","category":"section"},{"location":"troubleshooting/#Error-parsing-YAML-files","page":"Troubleshooting","title":"Error parsing YAML files","text":"","category":"section"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"If you encounter","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"ERROR: expected '<document start>' but found YAML.BlockMappingStartToken at nothing","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"or","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"ERROR: while scanning a simple key at line n, column 0: could not find expected ':' at line n+1, column 0","category":"page"},{"location":"troubleshooting/","page":"Troubleshooting","title":"Troubleshooting","text":"Check whether you have no space between the YAML key and its value like key:1 or key:some text, etc. To correct, change to key: 1, key: some text, etc. Otherwise check other YAML syntax you may have broken.","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"To install this package, first, you need to install a julia executable from its official website. Version v1.0.0 and above is required. This package may not work on v0.7 and below.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"If you are using a Mac, and have Homebrew installed, open Terminal.app and type:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"brew cask install julia","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Now I am using macOS as a standard platform to explain the following steps:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Open Terminal.app, and type julia to start a Julia session.\nRun\njulia> using Pkg; Pkg.update()\n\njulia> pkg\"add git@github.com:MineralsCloud/AbInitioSoftwareBase.jl.git\"\nand wait for its finish.\nRun\njulia> using AbInitioSoftwareBase\nand have fun!\nWhile using, please keep this Julia session alive. Restarting may recompile the package and cost some time.","category":"page"},{"location":"install/#Reinstall","page":"Installation","title":"Reinstall","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"In the same Julia session, run\njulia> Pkg.rm(\"AbInitioSoftwareBase\"); Pkg.gc()\nPress ctrl+d to quit the current session. Start a new Julia session and repeat the above steps.","category":"page"},{"location":"api/CLI/","page":"CLI module","title":"CLI module","text":"Modules = [AbInitioSoftwareBase.CLI]","category":"page"},{"location":"api/CLI/#AbInitioSoftwareBase.CLI.Mpiexec","page":"CLI module","title":"AbInitioSoftwareBase.CLI.Mpiexec","text":"Mpiexec(np; bin = \"mpiexec\", host = [], hostfile = \"\", args = Pair[])\n\nRepresent the mpiexec or mpirun executable. Must be combined with an actual command.\n\nType ?Mpiexec.host to see the documentation of the host parameter, and so on.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AbInitioSoftwareBase\nDocTestSetup = :(using AbInitioSoftwareBase)","category":"page"},{"location":"#AbInitioSoftwareBase","page":"Home","title":"AbInitioSoftwareBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"install.md\",\n    \"develop.md\",\n]\nDepth = 1","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"}]
}
