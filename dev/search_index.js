var documenterSearchIndex = {"docs":
[{"location":"api/Inputs/","page":"Inputs module","title":"Inputs module","text":"Modules = [AbInitioSoftwareBase.Inputs]","category":"page"},{"location":"api/Inputs/#AbInitioSoftwareBase.Inputs.Input","page":"Inputs module","title":"AbInitioSoftwareBase.Inputs.Input","text":"An abstract type representing an input object of ab initio software.\n\n\n\n\n\n","category":"type"},{"location":"api/Inputs/#AbInitioSoftwareBase.Inputs.inputstring","page":"Inputs module","title":"AbInitioSoftwareBase.Inputs.inputstring","text":"Return a String that represents the input of the software. Need to be implemented.\n\n\n\n\n\n","category":"function"},{"location":"api/Inputs/#AbInitioSoftwareBase.Inputs.write_input","page":"Inputs module","title":"AbInitioSoftwareBase.Inputs.write_input","text":"write_input(file, object::Input, dry_run = false)\n\nWrite object to file. Use dry_run = true to print without actual writing.\n\n\n\n\n\n","category":"function"},{"location":"develop/#How-to-develop-this-package-by-yourself","page":"Development","title":"How to develop this package by yourself","text":"","category":"section"},{"location":"develop/#Download-the-project","page":"Development","title":"Download the project","text":"","category":"section"},{"location":"develop/","page":"Development","title":"Development","text":"Similar to section \"Installation\", run","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"julia> using Pkg\n\njulia> pkg\"dev git@github.com:MineralsCloud/AbInitioSoftwareBase.jl.git\"","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"Then the package will be cloned to your local machine at a path. On macOS, by default is located at ~/.julia/dev/AbInitioSoftwareBase unless you modify the JULIA_DEPOT_PATH environment variable. (See Julia's official documentation on how to do this.) In the following text, we will call it PKGROOT.","category":"page"},{"location":"develop/#instantiating","page":"Development","title":"Instantiate the project","text":"","category":"section"},{"location":"develop/","page":"Development","title":"Development","text":"Go to PKGROOT, start a new Julia session and run","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"julia> using Pkg; Pkg.instantiate()","category":"page"},{"location":"develop/#How-to-build-docs","page":"Development","title":"How to build docs","text":"","category":"section"},{"location":"develop/","page":"Development","title":"Development","text":"Usually, the up-to-state doc is available in here, but there are cases where users need to build the doc themselves.","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"After instantiating the project, go to PKGROOT, run (without the $ prompt)","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"$ julia --color=yes docs/make.jl","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"in your terminal. In a while a folder PKGROOT/docs/build will appear. Open PKGROOT/docs/build/index.html with your favorite browser and have fun!","category":"page"},{"location":"develop/#How-to-run-tests","page":"Development","title":"How to run tests","text":"","category":"section"},{"location":"develop/","page":"Development","title":"Development","text":"After instantiating the project, go to PKGROOT, run (without the $ prompt)","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"$ julia --color=yes test/runtests.jl","category":"page"},{"location":"develop/","page":"Development","title":"Development","text":"in your terminal.","category":"page"},{"location":"install/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"To install this package, first, you need to install a julia executable from its official website. Version v1.0.0 and above is required. This package may not work on v0.7 and below.","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"If you are using a Mac, and have Homebrew installed, open Terminal.app and type:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"brew cask install julia","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Now I am using macOS as a standard platform to explain the following steps:","category":"page"},{"location":"install/","page":"Installation","title":"Installation","text":"Open Terminal.app, and type julia to start a Julia session.\nRun\njulia> using Pkg; Pkg.update()\n\njulia> pkg\"add git@github.com:MineralsCloud/AbInitioSoftwareBase.jl.git\"\nand wait for its finish.\nRun\njulia> using AbInitioSoftwareBase\nand have fun!\nWhile using, please keep this Julia session alive. Restarting may recompile the package and cost some time.","category":"page"},{"location":"install/#Reinstall","page":"Installation","title":"Reinstall","text":"","category":"section"},{"location":"install/","page":"Installation","title":"Installation","text":"In the same Julia session, run\njulia> Pkg.rm(\"AbInitioSoftwareBase\"); Pkg.gc()\nPress ctrl+d to quit the current session. Start a new Julia session and repeat the above steps.","category":"page"},{"location":"api/CLI/","page":"CLI module","title":"CLI module","text":"Modules = [AbInitioSoftwareBase.CLI]","category":"page"},{"location":"api/CLI/#AbInitioSoftwareBase.CLI.MpiLauncher","page":"CLI module","title":"AbInitioSoftwareBase.CLI.MpiLauncher","text":"MpiLauncher(n; bin = \"mpiexec\", host = [], hostfile = \"\", args = [])\n\nRepresent the mpiexec or mpirun executable. Must be combined with an actual command.\n\nType ?MpiCmd.host to see the documentation of the host parameter, and so on.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AbInitioSoftwareBase\nDocTestSetup = :(using AbInitioSoftwareBase)","category":"page"},{"location":"#AbInitioSoftwareBase","page":"Home","title":"AbInitioSoftwareBase","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"See the Index for the complete list of documented functions and types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"install.md\",\n    \"develop.md\",\n]\nDepth = 1","category":"page"},{"location":"#main-index","page":"Home","title":"Index","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"api/api/","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase module","text":"Modules = [AbInitioSoftwareBase]","category":"page"},{"location":"api/api/#AbInitioSoftwareBase.extension-Tuple{Any}","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase.extension","text":"Get the extension from filepath. Return an empty string if no extension is found.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#AbInitioSoftwareBase.load-Tuple{Any}","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase.load","text":"load(filepath)\n\nload data from filepath to a Dict.\n\nBy now, YAML, JSON, and TOML formats are supported. The format is recognized by filepath extension.\n\n\n\n\n\n","category":"method"},{"location":"api/api/#AbInitioSoftwareBase.save-Tuple{Any,Any}","page":"AbInitioSoftwareBase module","title":"AbInitioSoftwareBase.save","text":"save(filepath, data)\n\nSave data to filepath.\n\nBy now, YAML, JSON, and TOML formats are supported. The format is recognized by filepath extension.\n\nwarning: Warning\nAllowed data types can be referenced in JSON.jl documentation and YAML.jl documentation. For TOML format, only AbstractDict type is allowed.\n\n\n\n\n\n","category":"method"}]
}
